# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/configuration-reference
version: 2.1

orbs:
  slack: circleci/slack@4.12.3

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/configuration-reference/#jobs
jobs: 
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run: cd frontend && npm install
      - run: cd frontend && npm run build
      - run: echo ${MY_TEST_ENV}
      - run: echo $VAR_DONT_EXIST
      - run: echo $SLACK_DEFAULT_CHANNEL
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - slack/notify:
          event: fail
          template: basic_fail_1
      - slack/notify:
          event: pass
          template: basic_success_1

  # build-backend:
  #   docker:
  #     - image: circleci/node:13.8.0
  #   steps:
  #     - checkout
  #     - restore_cache:
  #         keys: [backend-build]   
  #     - run: cd backend && npm install
  #     - run: cd backend && npm run build
  #     - save_cache:
  #         paths: [backend/node_modules]
  #         key: backend-build

  # test-frontend:
  #   docker:
  #     - image: circleci/node:13.8.0
  #   steps:
  #     - checkout
  #     - restore_cache:
  #         keys: [frontend-test]
  #     - run: cd frontend && npm install
  #     - run: cd frontend && npm run test
  #     - save_cache:
  #         paths: [frontend/node_modules]
  #         key: frontend-test

  # test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-test]
      - run: cd backend && npm install
      - run: cd backend && npm run test
      - save_cache:
          paths: [backend/node_modules]
          key: backend-test

  # scan-frontend:
  #   docker:
  #     - image: circleci/node:13.8.0
  #   steps:
  #     - checkout
  #     - restore_cache:
  #         keys: [frontend-scan]
  #     - run: cd frontend && npm install
  #     - run: cd frontend && npm audit fix --audit-level=critical --force
  #     - run: cd frontend && npm update minimist --depth 4
  #     - run: cd frontend && npm update loader-utils --depth 2
  #     - run: cd frontend && npm audit --audit-level=critical
  #     - save_cache:
  #         paths: [frontend/node_modules]
  #         key: frontend-scan

  # scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-scan]
      - run: cd backend && npm install
      - run: cd backend && npm audit fix --audit-level=critical --force
      - run: cd backend && npm update minimist --depth 4
      - run: cd backend && npm update loader-utils --depth 2
      - run: cd backend && npm update mkdirp --depth 2
      - run: cd backend && npm audit --audit-level=critical
      - save_cache:
          paths: [backend/node_modules]
          key: backend-scan

# Orchestrate jobs using workflows
# See: https://circleci.com/docs/configuration-reference/#workflows
workflows:
  default:
    jobs:
      - build-frontend:
          context: uda-context
      # - build-backend
      # - test-frontend:
      #     requires: [build-frontend]
      # - test-backend:
      #     requires: [build-backend]
      # - scan-frontend:
      #     requires: [build-frontend]
      # - scan-backend:
      #     requires: [build-backend]